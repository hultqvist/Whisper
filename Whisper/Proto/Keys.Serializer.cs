//
//	This is the backend code for reading and writing
//	Report bugs to: https://silentorbit.com/protobuf/
//
//	Generated by ProtocolBuffer
//	- a pure c# code generation implementation of protocol buffers
//

using System;
using System.IO;
using System.Text;
using System.Collections.Generic;
using ProtocolBuffers;
namespace Whisper.Keys
{
	public partial class PublicKey
	{
		public static PublicKey Deserialize(Stream stream)
		{
			PublicKey instance = new PublicKey();
			Deserialize(stream, instance);
			return instance;
		}
		
		public static PublicKey Deserialize(byte[] buffer)
		{
			using(MemoryStream ms = new MemoryStream(buffer))
				return Deserialize(ms);
		}
		
		public static T Deserialize<T> (Stream stream) where T : Whisper.Keys.PublicKey, new()
		{
			T instance = new T ();
			Deserialize (stream, instance);
			return instance;
		}
		
		public static T Deserialize<T> (byte[] buffer) where T : Whisper.Keys.PublicKey, new()
		{
			T instance = new T ();
			Deserialize(buffer, instance);
			return instance;
		}
		
		public static void Deserialize (byte[] buffer, Whisper.Keys.PublicKey instance)
		{
			using (MemoryStream ms = new MemoryStream(buffer))
				Deserialize (ms, instance);
		}
		
		public static Whisper.Keys.PublicKey Deserialize(Stream stream, Whisper.Keys.PublicKey instance)
		{
			while (true)
			{
				ProtocolBuffers.Key key = null;
				try {
						//Optimize reading keys for short field numbers
						int keyByte = stream.ReadByte ();
						if (keyByte == -1)
							break;
						//Optimized reading of known fields with field ID < 16
						switch (keyByte) {
						case 10: //Field 1 LengthDelimited
							instance.Modulus = ProtocolParser.ReadBytes(stream);
							break;
						case 18: //Field 2 LengthDelimited
							instance.Exponent = ProtocolParser.ReadBytes(stream);
							break;
						default:
							key = ProtocolParser.ReadKey ((byte)keyByte, stream);
							break;
						}
				} catch (IOException) {
					break;
				}
		
				if (key == null)
					continue;
		
				//Reading field ID > 16 and unknown field ID/wire type combinations
				switch (key.Field) {
				case 0:
					throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
				default:
					ProtocolParser.SkipKey(stream, key);
					break;
				}
			}
			
			instance.AfterDeserialize();
			return instance;
		}
		
		public static Whisper.Keys.PublicKey Read(byte[] buffer, Whisper.Keys.PublicKey instance)
		{
			using (MemoryStream ms = new MemoryStream(buffer))
				Deserialize (ms, instance);
			return instance;
		}
	
		public static void Serialize(Stream stream, PublicKey instance)
		{
			instance.BeforeSerialize();
		
			if(instance.Modulus == null)
				throw new ArgumentNullException("Modulus", "Required by proto specification.");
			ProtocolParser.WriteKey(stream, new ProtocolBuffers.Key(1, Wire.LengthDelimited));
			ProtocolParser.WriteBytes(stream, instance.Modulus);
			if(instance.Exponent == null)
				throw new ArgumentNullException("Exponent", "Required by proto specification.");
			ProtocolParser.WriteKey(stream, new ProtocolBuffers.Key(2, Wire.LengthDelimited));
			ProtocolParser.WriteBytes(stream, instance.Exponent);
		}
		
		public static byte[] SerializeToBytes(PublicKey instance)
		{
			using(MemoryStream ms = new MemoryStream())
			{
				Serialize(ms, instance);
				return ms.ToArray();
			}
		}
	}
	

}
namespace Whisper.Keys
{
	public partial class PrivateKey
	{
		public static PrivateKey Deserialize(Stream stream)
		{
			PrivateKey instance = new PrivateKey();
			Deserialize(stream, instance);
			return instance;
		}
		
		public static PrivateKey Deserialize(byte[] buffer)
		{
			using(MemoryStream ms = new MemoryStream(buffer))
				return Deserialize(ms);
		}
		
		public static T Deserialize<T> (Stream stream) where T : Whisper.Keys.PrivateKey, new()
		{
			T instance = new T ();
			Deserialize (stream, instance);
			return instance;
		}
		
		public static T Deserialize<T> (byte[] buffer) where T : Whisper.Keys.PrivateKey, new()
		{
			T instance = new T ();
			Deserialize(buffer, instance);
			return instance;
		}
		
		public static void Deserialize (byte[] buffer, Whisper.Keys.PrivateKey instance)
		{
			using (MemoryStream ms = new MemoryStream(buffer))
				Deserialize (ms, instance);
		}
		
		public static Whisper.Keys.PrivateKey Deserialize(Stream stream, Whisper.Keys.PrivateKey instance)
		{
			while (true)
			{
				ProtocolBuffers.Key key = null;
				try {
						//Optimize reading keys for short field numbers
						int keyByte = stream.ReadByte ();
						if (keyByte == -1)
							break;
						//Optimized reading of known fields with field ID < 16
						switch (keyByte) {
						case 10: //Field 1 LengthDelimited
							instance.Modulus = ProtocolParser.ReadBytes(stream);
							break;
						case 18: //Field 2 LengthDelimited
							instance.Exponent = ProtocolParser.ReadBytes(stream);
							break;
						case 26: //Field 3 LengthDelimited
							instance.P = ProtocolParser.ReadBytes(stream);
							break;
						case 34: //Field 4 LengthDelimited
							instance.Q = ProtocolParser.ReadBytes(stream);
							break;
						default:
							key = ProtocolParser.ReadKey ((byte)keyByte, stream);
							break;
						}
				} catch (IOException) {
					break;
				}
		
				if (key == null)
					continue;
		
				//Reading field ID > 16 and unknown field ID/wire type combinations
				switch (key.Field) {
				case 0:
					throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
				default:
					ProtocolParser.SkipKey(stream, key);
					break;
				}
			}
			
			instance.AfterDeserialize();
			return instance;
		}
		
		public static Whisper.Keys.PrivateKey Read(byte[] buffer, Whisper.Keys.PrivateKey instance)
		{
			using (MemoryStream ms = new MemoryStream(buffer))
				Deserialize (ms, instance);
			return instance;
		}
	
		public static void Serialize(Stream stream, PrivateKey instance)
		{
			instance.BeforeSerialize();
		
			if(instance.Modulus == null)
				throw new ArgumentNullException("Modulus", "Required by proto specification.");
			ProtocolParser.WriteKey(stream, new ProtocolBuffers.Key(1, Wire.LengthDelimited));
			ProtocolParser.WriteBytes(stream, instance.Modulus);
			if(instance.Exponent == null)
				throw new ArgumentNullException("Exponent", "Required by proto specification.");
			ProtocolParser.WriteKey(stream, new ProtocolBuffers.Key(2, Wire.LengthDelimited));
			ProtocolParser.WriteBytes(stream, instance.Exponent);
			if(instance.P == null)
				throw new ArgumentNullException("P", "Required by proto specification.");
			ProtocolParser.WriteKey(stream, new ProtocolBuffers.Key(3, Wire.LengthDelimited));
			ProtocolParser.WriteBytes(stream, instance.P);
			if(instance.Q == null)
				throw new ArgumentNullException("Q", "Required by proto specification.");
			ProtocolParser.WriteKey(stream, new ProtocolBuffers.Key(4, Wire.LengthDelimited));
			ProtocolParser.WriteBytes(stream, instance.Q);
		}
		
		public static byte[] SerializeToBytes(PrivateKey instance)
		{
			using(MemoryStream ms = new MemoryStream())
			{
				Serialize(ms, instance);
				return ms.ToArray();
			}
		}
	}
	

}

namespace ProtocolBuffers
{
	public static partial class Serializer
	{
		
		public static Whisper.Keys.PublicKey Read (Stream stream, Whisper.Keys.PublicKey instance)
		{
			return Whisper.Keys.PublicKey.Deserialize(stream, instance);
		}
		
		public static Whisper.Keys.PublicKey Read(byte[] buffer, Whisper.Keys.PublicKey instance)
		{
			using (MemoryStream ms = new MemoryStream(buffer))
				Whisper.Keys.PublicKey.Deserialize (ms, instance);
			return instance;
		}
		
		public static void Write(Stream stream, Whisper.Keys.PublicKey instance)
		{
			Whisper.Keys.PublicKey.Serialize(stream, instance);
		}
		

		
		public static Whisper.Keys.PrivateKey Read (Stream stream, Whisper.Keys.PrivateKey instance)
		{
			return Whisper.Keys.PrivateKey.Deserialize(stream, instance);
		}
		
		public static Whisper.Keys.PrivateKey Read(byte[] buffer, Whisper.Keys.PrivateKey instance)
		{
			using (MemoryStream ms = new MemoryStream(buffer))
				Whisper.Keys.PrivateKey.Deserialize (ms, instance);
			return instance;
		}
		
		public static void Write(Stream stream, Whisper.Keys.PrivateKey instance)
		{
			Whisper.Keys.PrivateKey.Serialize(stream, instance);
		}
		


	}
}
