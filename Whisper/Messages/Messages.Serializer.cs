//
//	This is the backend code for reading and writing
//	Report bugs to: https://silentorbit.com/protobuf/
//
//	Generated by ProtocolBuffer
//	- a pure c# code generation implementation of protocol buffers
//
using System;
using System.IO;
using System.Text;
using System.Collections.Generic;
using ProtocolBuffers;

namespace Whisper.Messages
{
	public partial class TrippleID
	{
		public static TrippleID Deserialize (Stream stream)
		{
			TrippleID instance = new TrippleID ();
			Deserialize (stream, instance);
			return instance;
		}
		
		public static TrippleID Deserialize (byte[] buffer)
		{
			using (MemoryStream ms = new MemoryStream(buffer))
				return Deserialize (ms);
		}
		
		public static T Deserialize<T> (Stream stream) where T : Whisper.Messages.TrippleID, new()
		{
			T instance = new T ();
			Deserialize (stream, instance);
			return instance;
		}
		
		public static T Deserialize<T> (byte[] buffer) where T : Whisper.Messages.TrippleID, new()
		{
			T instance = new T ();
			Deserialize (buffer, instance);
			return instance;
		}
		
		public static Whisper.Messages.TrippleID Deserialize (byte[] buffer, Whisper.Messages.TrippleID instance)
		{
			using (MemoryStream ms = new MemoryStream(buffer))
				Deserialize (ms, instance);
			return instance;
		}
		
		public static Whisper.Messages.TrippleID Deserialize (Stream stream, Whisper.Messages.TrippleID instance)
		{
			while (true) {
				ProtocolBuffers.Key key = null;
				int keyByte = stream.ReadByte ();
				if (keyByte == -1)
					break;
				//Optimized reading of known fields with field ID < 16
				switch (keyByte) {
				case 10: //Field 1 LengthDelimited
					instance.ChunkHashBytes = ProtocolParser.ReadBytes (stream);
					break;
				case 18: //Field 2 LengthDelimited
					instance.CustomIdBytes = ProtocolParser.ReadBytes (stream);
					break;
				case 26: //Field 3 LengthDelimited
					instance.ClearHashBytes = ProtocolParser.ReadBytes (stream);
					break;
				default:
					key = ProtocolParser.ReadKey ((byte)keyByte, stream);
					break;
				}
		
				if (key == null)
					continue;
		
				//Reading field ID > 16 and unknown field ID/wire type combinations
				switch (key.Field) {
				case 0:
					throw new InvalidDataException ("Invalid field id: 0, something went wrong in the stream");
				default:
					ProtocolParser.SkipKey (stream, key);
					break;
				}
			}
			
			instance.AfterDeserialize ();
			return instance;
		}
		
		public static Whisper.Messages.TrippleID Read (byte[] buffer, Whisper.Messages.TrippleID instance)
		{
			using (MemoryStream ms = new MemoryStream(buffer))
				Deserialize (ms, instance);
			return instance;
		}
	
		public static void Serialize (Stream stream, TrippleID instance)
		{
			instance.BeforeSerialize ();
		
			if (instance.ChunkHashBytes == null)
				throw new ArgumentNullException ("ChunkHashBytes", "Required by proto specification.");
			ProtocolParser.WriteKey (stream, new ProtocolBuffers.Key (1, Wire.LengthDelimited));
			ProtocolParser.WriteBytes (stream, instance.ChunkHashBytes);
			if (instance.CustomIdBytes != null) {
				ProtocolParser.WriteKey (stream, new ProtocolBuffers.Key (2, Wire.LengthDelimited));
				ProtocolParser.WriteBytes (stream, instance.CustomIdBytes);
			}
			if (instance.ClearHashBytes != null) {
				ProtocolParser.WriteKey (stream, new ProtocolBuffers.Key (3, Wire.LengthDelimited));
				ProtocolParser.WriteBytes (stream, instance.ClearHashBytes);
			}
		}
		
		public static byte[] SerializeToBytes (TrippleID instance)
		{
			using (MemoryStream ms = new MemoryStream()) {
				Serialize (ms, instance);
				return ms.ToArray ();
			}
		}
	}
	

}
namespace Whisper.ChunkGenerator
{
	public partial class StreamChunk
	{
		public static StreamChunk Deserialize (Stream stream)
		{
			StreamChunk instance = new StreamChunk ();
			Deserialize (stream, instance);
			return instance;
		}
		
		public static StreamChunk Deserialize (byte[] buffer)
		{
			using (MemoryStream ms = new MemoryStream(buffer))
				return Deserialize (ms);
		}
		
		public static T Deserialize<T> (Stream stream) where T : Whisper.ChunkGenerator.StreamChunk, new()
		{
			T instance = new T ();
			Deserialize (stream, instance);
			return instance;
		}
		
		public static T Deserialize<T> (byte[] buffer) where T : Whisper.ChunkGenerator.StreamChunk, new()
		{
			T instance = new T ();
			Deserialize (buffer, instance);
			return instance;
		}
		
		public static Whisper.ChunkGenerator.StreamChunk Deserialize (byte[] buffer, Whisper.ChunkGenerator.StreamChunk instance)
		{
			using (MemoryStream ms = new MemoryStream(buffer))
				Deserialize (ms, instance);
			return instance;
		}
		
		public static Whisper.ChunkGenerator.StreamChunk Deserialize (Stream stream, Whisper.ChunkGenerator.StreamChunk instance)
		{
			if (instance.Chunks == null)
				instance.Chunks = new List<Whisper.Messages.TrippleID> ();
			while (true) {
				ProtocolBuffers.Key key = null;
				int keyByte = stream.ReadByte ();
				if (keyByte == -1)
					break;
				//Optimized reading of known fields with field ID < 16
				switch (keyByte) {
				case 8: //Field 1 Varint
					instance.Size = ProtocolParser.ReadUInt64 (stream);
					break;
				case 18: //Field 2 LengthDelimited
					instance.Chunks.Add (Whisper.Messages.TrippleID.Deserialize (ProtocolParser.ReadBytes (stream)));
		
					break;
				default:
					key = ProtocolParser.ReadKey ((byte)keyByte, stream);
					break;
				}
		
				if (key == null)
					continue;
		
				//Reading field ID > 16 and unknown field ID/wire type combinations
				switch (key.Field) {
				case 0:
					throw new InvalidDataException ("Invalid field id: 0, something went wrong in the stream");
				default:
					ProtocolParser.SkipKey (stream, key);
					break;
				}
			}
			
			return instance;
		}
		
		public static Whisper.ChunkGenerator.StreamChunk Read (byte[] buffer, Whisper.ChunkGenerator.StreamChunk instance)
		{
			using (MemoryStream ms = new MemoryStream(buffer))
				Deserialize (ms, instance);
			return instance;
		}
	
		public static void Serialize (Stream stream, StreamChunk instance)
		{
			ProtocolParser.WriteKey (stream, new ProtocolBuffers.Key (1, Wire.Varint));
			ProtocolParser.WriteUInt64 (stream, instance.Size);
			if (instance.Chunks != null) {
				foreach (Whisper.Messages.TrippleID i2 in instance.Chunks) {
					ProtocolParser.WriteKey (stream, new ProtocolBuffers.Key (2, Wire.LengthDelimited));
					using (MemoryStream ms2 = new MemoryStream()) {
						Whisper.Messages.TrippleID.Serialize (ms2, i2);
						ProtocolParser.WriteBytes (stream, ms2.ToArray ());
					}
			
				}
			}
		}
		
		public static byte[] SerializeToBytes (StreamChunk instance)
		{
			using (MemoryStream ms = new MemoryStream()) {
				Serialize (ms, instance);
				return ms.ToArray ();
			}
		}
	}
	

}
namespace Whisper.ChunkGenerator
{
	public partial class TreeFile
	{
		public static TreeFile Deserialize (Stream stream)
		{
			TreeFile instance = new TreeFile ();
			Deserialize (stream, instance);
			return instance;
		}
		
		public static TreeFile Deserialize (byte[] buffer)
		{
			using (MemoryStream ms = new MemoryStream(buffer))
				return Deserialize (ms);
		}
		
		public static T Deserialize<T> (Stream stream) where T : Whisper.ChunkGenerator.TreeFile, new()
		{
			T instance = new T ();
			Deserialize (stream, instance);
			return instance;
		}
		
		public static T Deserialize<T> (byte[] buffer) where T : Whisper.ChunkGenerator.TreeFile, new()
		{
			T instance = new T ();
			Deserialize (buffer, instance);
			return instance;
		}
		
		public static Whisper.ChunkGenerator.TreeFile Deserialize (byte[] buffer, Whisper.ChunkGenerator.TreeFile instance)
		{
			using (MemoryStream ms = new MemoryStream(buffer))
				Deserialize (ms, instance);
			return instance;
		}
		
		public static Whisper.ChunkGenerator.TreeFile Deserialize (Stream stream, Whisper.ChunkGenerator.TreeFile instance)
		{
			while (true) {
				ProtocolBuffers.Key key = null;
				int keyByte = stream.ReadByte ();
				if (keyByte == -1)
					break;
				//Optimized reading of known fields with field ID < 16
				switch (keyByte) {
				case 10: //Field 1 LengthDelimited
					instance.Name = ProtocolParser.ReadString (stream);
					break;
				case 18: //Field 2 LengthDelimited
					if (instance.TreeChunkID == null)
						instance.TreeChunkID = Whisper.Messages.TrippleID.Deserialize (ProtocolParser.ReadBytes (stream));
					else
						Whisper.Messages.TrippleID.Deserialize (ProtocolParser.ReadBytes (stream), instance.TreeChunkID);
					break;
				default:
					key = ProtocolParser.ReadKey ((byte)keyByte, stream);
					break;
				}
		
				if (key == null)
					continue;
		
				//Reading field ID > 16 and unknown field ID/wire type combinations
				switch (key.Field) {
				case 0:
					throw new InvalidDataException ("Invalid field id: 0, something went wrong in the stream");
				default:
					ProtocolParser.SkipKey (stream, key);
					break;
				}
			}
			
			return instance;
		}
		
		public static Whisper.ChunkGenerator.TreeFile Read (byte[] buffer, Whisper.ChunkGenerator.TreeFile instance)
		{
			using (MemoryStream ms = new MemoryStream(buffer))
				Deserialize (ms, instance);
			return instance;
		}
	
		public static void Serialize (Stream stream, TreeFile instance)
		{
			if (instance.Name == null)
				throw new ArgumentNullException ("Name", "Required by proto specification.");
			ProtocolParser.WriteKey (stream, new ProtocolBuffers.Key (1, Wire.LengthDelimited));
			ProtocolParser.WriteString (stream, instance.Name);
			if (instance.TreeChunkID == null)
				throw new ArgumentNullException ("TreeChunkID", "Required by proto specification.");
			ProtocolParser.WriteKey (stream, new ProtocolBuffers.Key (2, Wire.LengthDelimited));
			using (MemoryStream ms2 = new MemoryStream()) {
				Whisper.Messages.TrippleID.Serialize (ms2, instance.TreeChunkID);
				ProtocolParser.WriteBytes (stream, ms2.ToArray ());
			}
		}
		
		public static byte[] SerializeToBytes (TreeFile instance)
		{
			using (MemoryStream ms = new MemoryStream()) {
				Serialize (ms, instance);
				return ms.ToArray ();
			}
		}
	}
	

}
namespace Whisper.ChunkGenerator
{
	public partial class TreeChunk
	{
		public static TreeChunk Deserialize (Stream stream)
		{
			TreeChunk instance = new TreeChunk ();
			Deserialize (stream, instance);
			return instance;
		}
		
		public static TreeChunk Deserialize (byte[] buffer)
		{
			using (MemoryStream ms = new MemoryStream(buffer))
				return Deserialize (ms);
		}
		
		public static T Deserialize<T> (Stream stream) where T : Whisper.ChunkGenerator.TreeChunk, new()
		{
			T instance = new T ();
			Deserialize (stream, instance);
			return instance;
		}
		
		public static T Deserialize<T> (byte[] buffer) where T : Whisper.ChunkGenerator.TreeChunk, new()
		{
			T instance = new T ();
			Deserialize (buffer, instance);
			return instance;
		}
		
		public static Whisper.ChunkGenerator.TreeChunk Deserialize (byte[] buffer, Whisper.ChunkGenerator.TreeChunk instance)
		{
			using (MemoryStream ms = new MemoryStream(buffer))
				Deserialize (ms, instance);
			return instance;
		}
		
		public static Whisper.ChunkGenerator.TreeChunk Deserialize (Stream stream, Whisper.ChunkGenerator.TreeChunk instance)
		{
			if (instance.Directories == null)
				instance.Directories = new List<Whisper.ChunkGenerator.TreeFile> ();
			if (instance.Files == null)
				instance.Files = new List<Whisper.ChunkGenerator.TreeFile> ();
			while (true) {
				ProtocolBuffers.Key key = null;
				int keyByte = stream.ReadByte ();
				if (keyByte == -1)
					break;
				//Optimized reading of known fields with field ID < 16
				switch (keyByte) {
				case 10: //Field 1 LengthDelimited
					instance.Directories.Add (Whisper.ChunkGenerator.TreeFile.Deserialize (ProtocolParser.ReadBytes (stream)));
		
					break;
				case 18: //Field 2 LengthDelimited
					instance.Files.Add (Whisper.ChunkGenerator.TreeFile.Deserialize (ProtocolParser.ReadBytes (stream)));
		
					break;
				default:
					key = ProtocolParser.ReadKey ((byte)keyByte, stream);
					break;
				}
		
				if (key == null)
					continue;
		
				//Reading field ID > 16 and unknown field ID/wire type combinations
				switch (key.Field) {
				case 0:
					throw new InvalidDataException ("Invalid field id: 0, something went wrong in the stream");
				default:
					ProtocolParser.SkipKey (stream, key);
					break;
				}
			}
			
			return instance;
		}
		
		public static Whisper.ChunkGenerator.TreeChunk Read (byte[] buffer, Whisper.ChunkGenerator.TreeChunk instance)
		{
			using (MemoryStream ms = new MemoryStream(buffer))
				Deserialize (ms, instance);
			return instance;
		}
	
		public static void Serialize (Stream stream, TreeChunk instance)
		{
			if (instance.Directories != null) {
				foreach (Whisper.ChunkGenerator.TreeFile i1 in instance.Directories) {
					ProtocolParser.WriteKey (stream, new ProtocolBuffers.Key (1, Wire.LengthDelimited));
					using (MemoryStream ms1 = new MemoryStream()) {
						Whisper.ChunkGenerator.TreeFile.Serialize (ms1, i1);
						ProtocolParser.WriteBytes (stream, ms1.ToArray ());
					}
			
				}
			}
			if (instance.Files != null) {
				foreach (Whisper.ChunkGenerator.TreeFile i2 in instance.Files) {
					ProtocolParser.WriteKey (stream, new ProtocolBuffers.Key (2, Wire.LengthDelimited));
					using (MemoryStream ms2 = new MemoryStream()) {
						Whisper.ChunkGenerator.TreeFile.Serialize (ms2, i2);
						ProtocolParser.WriteBytes (stream, ms2.ToArray ());
					}
			
				}
			}
		}
		
		public static byte[] SerializeToBytes (TreeChunk instance)
		{
			using (MemoryStream ms = new MemoryStream()) {
				Serialize (ms, instance);
				return ms.ToArray ();
			}
		}
	}
	

}
namespace Whisper.Messages
{
	public partial class MessageHeader
	{
		public static MessageHeader Deserialize (Stream stream)
		{
			MessageHeader instance = new MessageHeader ();
			Deserialize (stream, instance);
			return instance;
		}
		
		public static MessageHeader Deserialize (byte[] buffer)
		{
			using (MemoryStream ms = new MemoryStream(buffer))
				return Deserialize (ms);
		}
		
		public static T Deserialize<T> (Stream stream) where T : Whisper.Messages.MessageHeader, new()
		{
			T instance = new T ();
			Deserialize (stream, instance);
			return instance;
		}
		
		public static T Deserialize<T> (byte[] buffer) where T : Whisper.Messages.MessageHeader, new()
		{
			T instance = new T ();
			Deserialize (buffer, instance);
			return instance;
		}
		
		public static Whisper.Messages.MessageHeader Deserialize (byte[] buffer, Whisper.Messages.MessageHeader instance)
		{
			using (MemoryStream ms = new MemoryStream(buffer))
				Deserialize (ms, instance);
			return instance;
		}
		
		public static Whisper.Messages.MessageHeader Deserialize (Stream stream, Whisper.Messages.MessageHeader instance)
		{
			while (true) {
				ProtocolBuffers.Key key = null;
				int keyByte = stream.ReadByte ();
				if (keyByte == -1)
					break;
				//Optimized reading of known fields with field ID < 16
				switch (keyByte) {
				case 8: //Field 1 Varint
					instance.MessageId = ProtocolParser.ReadUInt32 (stream);
					break;
				case 18: //Field 2 LengthDelimited
					instance.Signature = ProtocolParser.ReadBytes (stream);
					break;
				default:
					key = ProtocolParser.ReadKey ((byte)keyByte, stream);
					break;
				}
		
				if (key == null)
					continue;
		
				//Reading field ID > 16 and unknown field ID/wire type combinations
				switch (key.Field) {
				case 0:
					throw new InvalidDataException ("Invalid field id: 0, something went wrong in the stream");
				default:
					ProtocolParser.SkipKey (stream, key);
					break;
				}
			}
			
			return instance;
		}
		
		public static Whisper.Messages.MessageHeader Read (byte[] buffer, Whisper.Messages.MessageHeader instance)
		{
			using (MemoryStream ms = new MemoryStream(buffer))
				Deserialize (ms, instance);
			return instance;
		}
	
		public static void Serialize (Stream stream, MessageHeader instance)
		{
			ProtocolParser.WriteKey (stream, new ProtocolBuffers.Key (1, Wire.Varint));
			ProtocolParser.WriteUInt32 (stream, instance.MessageId);
			if (instance.Signature != null) {
				ProtocolParser.WriteKey (stream, new ProtocolBuffers.Key (2, Wire.LengthDelimited));
				ProtocolParser.WriteBytes (stream, instance.Signature);
			}
		}
		
		public static byte[] SerializeToBytes (MessageHeader instance)
		{
			using (MemoryStream ms = new MemoryStream()) {
				Serialize (ms, instance);
				return ms.ToArray ();
			}
		}
	}
	

}
namespace Whisper.Messages
{
	public partial class TreeMessage
	{
		public static TreeMessage Deserialize (Stream stream)
		{
			TreeMessage instance = new TreeMessage ();
			Deserialize (stream, instance);
			return instance;
		}
		
		public static TreeMessage Deserialize (byte[] buffer)
		{
			using (MemoryStream ms = new MemoryStream(buffer))
				return Deserialize (ms);
		}
		
		public static T Deserialize<T> (Stream stream) where T : Whisper.Messages.TreeMessage, new()
		{
			T instance = new T ();
			Deserialize (stream, instance);
			return instance;
		}
		
		public static T Deserialize<T> (byte[] buffer) where T : Whisper.Messages.TreeMessage, new()
		{
			T instance = new T ();
			Deserialize (buffer, instance);
			return instance;
		}
		
		public static Whisper.Messages.TreeMessage Deserialize (byte[] buffer, Whisper.Messages.TreeMessage instance)
		{
			using (MemoryStream ms = new MemoryStream(buffer))
				Deserialize (ms, instance);
			return instance;
		}
		
		public static Whisper.Messages.TreeMessage Deserialize (Stream stream, Whisper.Messages.TreeMessage instance)
		{
			while (true) {
				ProtocolBuffers.Key key = null;
				int keyByte = stream.ReadByte ();
				if (keyByte == -1)
					break;
				//Optimized reading of known fields with field ID < 16
				switch (keyByte) {
				case 10: //Field 1 LengthDelimited
					instance.Name = ProtocolParser.ReadString (stream);
					break;
				case 18: //Field 2 LengthDelimited
					if (instance.TreeChunkID == null)
						instance.TreeChunkID = Whisper.Messages.TrippleID.Deserialize (ProtocolParser.ReadBytes (stream));
					else
						Whisper.Messages.TrippleID.Deserialize (ProtocolParser.ReadBytes (stream), instance.TreeChunkID);
					break;
				default:
					key = ProtocolParser.ReadKey ((byte)keyByte, stream);
					break;
				}
		
				if (key == null)
					continue;
		
				//Reading field ID > 16 and unknown field ID/wire type combinations
				switch (key.Field) {
				case 0:
					throw new InvalidDataException ("Invalid field id: 0, something went wrong in the stream");
				default:
					ProtocolParser.SkipKey (stream, key);
					break;
				}
			}
			
			return instance;
		}
		
		public static Whisper.Messages.TreeMessage Read (byte[] buffer, Whisper.Messages.TreeMessage instance)
		{
			using (MemoryStream ms = new MemoryStream(buffer))
				Deserialize (ms, instance);
			return instance;
		}
	
		public static void Serialize (Stream stream, TreeMessage instance)
		{
			if (instance.Name == null)
				throw new ArgumentNullException ("Name", "Required by proto specification.");
			ProtocolParser.WriteKey (stream, new ProtocolBuffers.Key (1, Wire.LengthDelimited));
			ProtocolParser.WriteString (stream, instance.Name);
			if (instance.TreeChunkID == null)
				throw new ArgumentNullException ("TreeChunkID", "Required by proto specification.");
			ProtocolParser.WriteKey (stream, new ProtocolBuffers.Key (2, Wire.LengthDelimited));
			using (MemoryStream ms2 = new MemoryStream()) {
				Whisper.Messages.TrippleID.Serialize (ms2, instance.TreeChunkID);
				ProtocolParser.WriteBytes (stream, ms2.ToArray ());
			}
		}
		
		public static byte[] SerializeToBytes (TreeMessage instance)
		{
			using (MemoryStream ms = new MemoryStream()) {
				Serialize (ms, instance);
				return ms.ToArray ();
			}
		}
	}
	

}
namespace Whisper.Messages
{
	public partial class RouteMessage
	{
		public static RouteMessage Deserialize (Stream stream)
		{
			RouteMessage instance = new RouteMessage ();
			Deserialize (stream, instance);
			return instance;
		}
		
		public static RouteMessage Deserialize (byte[] buffer)
		{
			using (MemoryStream ms = new MemoryStream(buffer))
				return Deserialize (ms);
		}
		
		public static T Deserialize<T> (Stream stream) where T : Whisper.Messages.RouteMessage, new()
		{
			T instance = new T ();
			Deserialize (stream, instance);
			return instance;
		}
		
		public static T Deserialize<T> (byte[] buffer) where T : Whisper.Messages.RouteMessage, new()
		{
			T instance = new T ();
			Deserialize (buffer, instance);
			return instance;
		}
		
		public static Whisper.Messages.RouteMessage Deserialize (byte[] buffer, Whisper.Messages.RouteMessage instance)
		{
			using (MemoryStream ms = new MemoryStream(buffer))
				Deserialize (ms, instance);
			return instance;
		}
		
		public static Whisper.Messages.RouteMessage Deserialize (Stream stream, Whisper.Messages.RouteMessage instance)
		{
			if (instance.Chunks == null)
				instance.Chunks = new List<byte[]> ();
			while (true) {
				ProtocolBuffers.Key key = null;
				int keyByte = stream.ReadByte ();
				if (keyByte == -1)
					break;
				//Optimized reading of known fields with field ID < 16
				switch (keyByte) {
				case 10: //Field 1 LengthDelimited
					instance.MessageChunkHash = ProtocolParser.ReadBytes (stream);
					break;
				case 18: //Field 2 LengthDelimited
					instance.To = ProtocolParser.ReadString (stream);
					break;
				case 26: //Field 3 LengthDelimited
					instance.Chunks.Add (ProtocolParser.ReadBytes (stream));
		
					break;
				default:
					key = ProtocolParser.ReadKey ((byte)keyByte, stream);
					break;
				}
		
				if (key == null)
					continue;
		
				//Reading field ID > 16 and unknown field ID/wire type combinations
				switch (key.Field) {
				case 0:
					throw new InvalidDataException ("Invalid field id: 0, something went wrong in the stream");
				default:
					ProtocolParser.SkipKey (stream, key);
					break;
				}
			}
			
			return instance;
		}
		
		public static Whisper.Messages.RouteMessage Read (byte[] buffer, Whisper.Messages.RouteMessage instance)
		{
			using (MemoryStream ms = new MemoryStream(buffer))
				Deserialize (ms, instance);
			return instance;
		}
	
		public static void Serialize (Stream stream, RouteMessage instance)
		{
			if (instance.MessageChunkHash == null)
				throw new ArgumentNullException ("MessageChunkHash", "Required by proto specification.");
			ProtocolParser.WriteKey (stream, new ProtocolBuffers.Key (1, Wire.LengthDelimited));
			ProtocolParser.WriteBytes (stream, instance.MessageChunkHash);
			if (instance.To == null)
				throw new ArgumentNullException ("To", "Required by proto specification.");
			ProtocolParser.WriteKey (stream, new ProtocolBuffers.Key (2, Wire.LengthDelimited));
			ProtocolParser.WriteString (stream, instance.To);
			if (instance.Chunks != null) {
				foreach (byte[] i3 in instance.Chunks) {
					ProtocolParser.WriteKey (stream, new ProtocolBuffers.Key (3, Wire.LengthDelimited));
					ProtocolParser.WriteBytes (stream, i3);
			
				}
			}
		}
		
		public static byte[] SerializeToBytes (RouteMessage instance)
		{
			using (MemoryStream ms = new MemoryStream()) {
				Serialize (ms, instance);
				return ms.ToArray ();
			}
		}
	}
	

}
namespace Whisper.Messages
{
	public partial class ListMessage
	{
		public static ListMessage Deserialize (Stream stream)
		{
			ListMessage instance = new ListMessage ();
			Deserialize (stream, instance);
			return instance;
		}
		
		public static ListMessage Deserialize (byte[] buffer)
		{
			using (MemoryStream ms = new MemoryStream(buffer))
				return Deserialize (ms);
		}
		
		public static T Deserialize<T> (Stream stream) where T : Whisper.Messages.ListMessage, new()
		{
			T instance = new T ();
			Deserialize (stream, instance);
			return instance;
		}
		
		public static T Deserialize<T> (byte[] buffer) where T : Whisper.Messages.ListMessage, new()
		{
			T instance = new T ();
			Deserialize (buffer, instance);
			return instance;
		}
		
		public static Whisper.Messages.ListMessage Deserialize (byte[] buffer, Whisper.Messages.ListMessage instance)
		{
			using (MemoryStream ms = new MemoryStream(buffer))
				Deserialize (ms, instance);
			return instance;
		}
		
		public static Whisper.Messages.ListMessage Deserialize (Stream stream, Whisper.Messages.ListMessage instance)
		{
			if (instance.List == null)
				instance.List = new List<Whisper.Messages.TrippleID> ();
			while (true) {
				ProtocolBuffers.Key key = null;
				int keyByte = stream.ReadByte ();
				if (keyByte == -1)
					break;
				//Optimized reading of known fields with field ID < 16
				switch (keyByte) {
				case 10: //Field 1 LengthDelimited
					instance.List.Add (Whisper.Messages.TrippleID.Deserialize (ProtocolParser.ReadBytes (stream)));
		
					break;
				default:
					key = ProtocolParser.ReadKey ((byte)keyByte, stream);
					break;
				}
		
				if (key == null)
					continue;
		
				//Reading field ID > 16 and unknown field ID/wire type combinations
				switch (key.Field) {
				case 0:
					throw new InvalidDataException ("Invalid field id: 0, something went wrong in the stream");
				default:
					ProtocolParser.SkipKey (stream, key);
					break;
				}
			}
			
			return instance;
		}
		
		public static Whisper.Messages.ListMessage Read (byte[] buffer, Whisper.Messages.ListMessage instance)
		{
			using (MemoryStream ms = new MemoryStream(buffer))
				Deserialize (ms, instance);
			return instance;
		}
	
		public static void Serialize (Stream stream, ListMessage instance)
		{
			if (instance.List != null) {
				foreach (Whisper.Messages.TrippleID i1 in instance.List) {
					ProtocolParser.WriteKey (stream, new ProtocolBuffers.Key (1, Wire.LengthDelimited));
					using (MemoryStream ms1 = new MemoryStream()) {
						Whisper.Messages.TrippleID.Serialize (ms1, i1);
						ProtocolParser.WriteBytes (stream, ms1.ToArray ());
					}
			
				}
			}
		}
		
		public static byte[] SerializeToBytes (ListMessage instance)
		{
			using (MemoryStream ms = new MemoryStream()) {
				Serialize (ms, instance);
				return ms.ToArray ();
			}
		}
	}
	

}

namespace ProtocolBuffers
{
	public static partial class Serializer
	{
		public static Whisper.Messages.TrippleID Read (Stream stream, Whisper.Messages.TrippleID instance)
		{
			return Whisper.Messages.TrippleID.Deserialize (stream, instance);
		}
		
		public static Whisper.Messages.TrippleID Read (byte[] buffer, Whisper.Messages.TrippleID instance)
		{
			using (MemoryStream ms = new MemoryStream(buffer))
				Whisper.Messages.TrippleID.Deserialize (ms, instance);
			return instance;
		}
		
		public static void Write (Stream stream, Whisper.Messages.TrippleID instance)
		{
			Whisper.Messages.TrippleID.Serialize (stream, instance);
		}

		public static Whisper.ChunkGenerator.StreamChunk Read (Stream stream, Whisper.ChunkGenerator.StreamChunk instance)
		{
			return Whisper.ChunkGenerator.StreamChunk.Deserialize (stream, instance);
		}
		
		public static Whisper.ChunkGenerator.StreamChunk Read (byte[] buffer, Whisper.ChunkGenerator.StreamChunk instance)
		{
			using (MemoryStream ms = new MemoryStream(buffer))
				Whisper.ChunkGenerator.StreamChunk.Deserialize (ms, instance);
			return instance;
		}
		
		public static void Write (Stream stream, Whisper.ChunkGenerator.StreamChunk instance)
		{
			Whisper.ChunkGenerator.StreamChunk.Serialize (stream, instance);
		}

		public static Whisper.ChunkGenerator.TreeFile Read (Stream stream, Whisper.ChunkGenerator.TreeFile instance)
		{
			return Whisper.ChunkGenerator.TreeFile.Deserialize (stream, instance);
		}
		
		public static Whisper.ChunkGenerator.TreeFile Read (byte[] buffer, Whisper.ChunkGenerator.TreeFile instance)
		{
			using (MemoryStream ms = new MemoryStream(buffer))
				Whisper.ChunkGenerator.TreeFile.Deserialize (ms, instance);
			return instance;
		}
		
		public static void Write (Stream stream, Whisper.ChunkGenerator.TreeFile instance)
		{
			Whisper.ChunkGenerator.TreeFile.Serialize (stream, instance);
		}

		public static Whisper.ChunkGenerator.TreeChunk Read (Stream stream, Whisper.ChunkGenerator.TreeChunk instance)
		{
			return Whisper.ChunkGenerator.TreeChunk.Deserialize (stream, instance);
		}
		
		public static Whisper.ChunkGenerator.TreeChunk Read (byte[] buffer, Whisper.ChunkGenerator.TreeChunk instance)
		{
			using (MemoryStream ms = new MemoryStream(buffer))
				Whisper.ChunkGenerator.TreeChunk.Deserialize (ms, instance);
			return instance;
		}
		
		public static void Write (Stream stream, Whisper.ChunkGenerator.TreeChunk instance)
		{
			Whisper.ChunkGenerator.TreeChunk.Serialize (stream, instance);
		}

		public static Whisper.Messages.MessageHeader Read (Stream stream, Whisper.Messages.MessageHeader instance)
		{
			return Whisper.Messages.MessageHeader.Deserialize (stream, instance);
		}
		
		public static Whisper.Messages.MessageHeader Read (byte[] buffer, Whisper.Messages.MessageHeader instance)
		{
			using (MemoryStream ms = new MemoryStream(buffer))
				Whisper.Messages.MessageHeader.Deserialize (ms, instance);
			return instance;
		}
		
		public static void Write (Stream stream, Whisper.Messages.MessageHeader instance)
		{
			Whisper.Messages.MessageHeader.Serialize (stream, instance);
		}

		public static Whisper.Messages.TreeMessage Read (Stream stream, Whisper.Messages.TreeMessage instance)
		{
			return Whisper.Messages.TreeMessage.Deserialize (stream, instance);
		}
		
		public static Whisper.Messages.TreeMessage Read (byte[] buffer, Whisper.Messages.TreeMessage instance)
		{
			using (MemoryStream ms = new MemoryStream(buffer))
				Whisper.Messages.TreeMessage.Deserialize (ms, instance);
			return instance;
		}
		
		public static void Write (Stream stream, Whisper.Messages.TreeMessage instance)
		{
			Whisper.Messages.TreeMessage.Serialize (stream, instance);
		}

		public static Whisper.Messages.RouteMessage Read (Stream stream, Whisper.Messages.RouteMessage instance)
		{
			return Whisper.Messages.RouteMessage.Deserialize (stream, instance);
		}
		
		public static Whisper.Messages.RouteMessage Read (byte[] buffer, Whisper.Messages.RouteMessage instance)
		{
			using (MemoryStream ms = new MemoryStream(buffer))
				Whisper.Messages.RouteMessage.Deserialize (ms, instance);
			return instance;
		}
		
		public static void Write (Stream stream, Whisper.Messages.RouteMessage instance)
		{
			Whisper.Messages.RouteMessage.Serialize (stream, instance);
		}

		public static Whisper.Messages.ListMessage Read (Stream stream, Whisper.Messages.ListMessage instance)
		{
			return Whisper.Messages.ListMessage.Deserialize (stream, instance);
		}
		
		public static Whisper.Messages.ListMessage Read (byte[] buffer, Whisper.Messages.ListMessage instance)
		{
			using (MemoryStream ms = new MemoryStream(buffer))
				Whisper.Messages.ListMessage.Deserialize (ms, instance);
			return instance;
		}
		
		public static void Write (Stream stream, Whisper.Messages.ListMessage instance)
		{
			Whisper.Messages.ListMessage.Serialize (stream, instance);
		}


	}
}
