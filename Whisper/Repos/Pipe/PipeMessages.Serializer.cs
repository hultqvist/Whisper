//
//	This is the backend code for reading and writing
//	Report bugs to: https://silentorbit.com/protobuf/
//
//	Generated by ProtocolBuffer
//	- a pure c# code generation implementation of protocol buffers
//
using System;
using System.IO;
using System.Text;
using System.Collections.Generic;
using ProtocolBuffers;

namespace Whisper.Repos.Pipe
{
	public partial class PipeHeader
	{
		public static PipeHeader Deserialize (Stream stream)
		{
			PipeHeader instance = new PipeHeader ();
			Deserialize (stream, instance);
			return instance;
		}
		
		public static PipeHeader Deserialize (byte[] buffer)
		{
			using (MemoryStream ms = new MemoryStream(buffer))
				return Deserialize (ms);
		}
		
		public static T Deserialize<T> (Stream stream) where T : Whisper.Repos.Pipe.PipeHeader, new()
		{
			T instance = new T ();
			Deserialize (stream, instance);
			return instance;
		}
		
		public static T Deserialize<T> (byte[] buffer) where T : Whisper.Repos.Pipe.PipeHeader, new()
		{
			T instance = new T ();
			Deserialize (buffer, instance);
			return instance;
		}
		
		public static Whisper.Repos.Pipe.PipeHeader Deserialize (byte[] buffer, Whisper.Repos.Pipe.PipeHeader instance)
		{
			using (MemoryStream ms = new MemoryStream(buffer))
				Deserialize (ms, instance);
			return instance;
		}
		
		public static Whisper.Repos.Pipe.PipeHeader Deserialize (Stream stream, Whisper.Repos.Pipe.PipeHeader instance)
		{
			while (true) {
				ProtocolBuffers.Key key = null;
				int keyByte = stream.ReadByte ();
				if (keyByte == -1)
					break;
				//Optimized reading of known fields with field ID < 16
				switch (keyByte) {
				case 8: //Field 1 Varint
					instance.TypeID = ProtocolParser.ReadUInt32 (stream);
					break;
				case 16: //Field 2 Varint
					instance.DebugNumber = ProtocolParser.ReadUInt32 (stream);
					break;
				default:
					key = ProtocolParser.ReadKey ((byte)keyByte, stream);
					break;
				}
		
				if (key == null)
					continue;
		
				//Reading field ID > 16 and unknown field ID/wire type combinations
				switch (key.Field) {
				case 0:
					throw new InvalidDataException ("Invalid field id: 0, something went wrong in the stream");
				default:
					ProtocolParser.SkipKey (stream, key);
					break;
				}
			}
			
			return instance;
		}
		
		public static Whisper.Repos.Pipe.PipeHeader Read (byte[] buffer, Whisper.Repos.Pipe.PipeHeader instance)
		{
			using (MemoryStream ms = new MemoryStream(buffer))
				Deserialize (ms, instance);
			return instance;
		}
	
		public static void Serialize (Stream stream, PipeHeader instance)
		{
			ProtocolParser.WriteKey (stream, new ProtocolBuffers.Key (1, Wire.Varint));
			ProtocolParser.WriteUInt32 (stream, instance.TypeID);
			ProtocolParser.WriteKey (stream, new ProtocolBuffers.Key (2, Wire.Varint));
			ProtocolParser.WriteUInt32 (stream, instance.DebugNumber);
		}
		
		public static byte[] SerializeToBytes (PipeHeader instance)
		{
			using (MemoryStream ms = new MemoryStream()) {
				Serialize (ms, instance);
				return ms.ToArray ();
			}
		}
	}
	

}
namespace Whisper.Repos.Pipe
{
	public partial class RequestCustomHash
	{
		public static RequestCustomHash Deserialize (Stream stream)
		{
			RequestCustomHash instance = new RequestCustomHash ();
			Deserialize (stream, instance);
			return instance;
		}
		
		public static RequestCustomHash Deserialize (byte[] buffer)
		{
			using (MemoryStream ms = new MemoryStream(buffer))
				return Deserialize (ms);
		}
		
		public static T Deserialize<T> (Stream stream) where T : Whisper.Repos.Pipe.RequestCustomHash, new()
		{
			T instance = new T ();
			Deserialize (stream, instance);
			return instance;
		}
		
		public static T Deserialize<T> (byte[] buffer) where T : Whisper.Repos.Pipe.RequestCustomHash, new()
		{
			T instance = new T ();
			Deserialize (buffer, instance);
			return instance;
		}
		
		public static Whisper.Repos.Pipe.RequestCustomHash Deserialize (byte[] buffer, Whisper.Repos.Pipe.RequestCustomHash instance)
		{
			using (MemoryStream ms = new MemoryStream(buffer))
				Deserialize (ms, instance);
			return instance;
		}
		
		public static Whisper.Repos.Pipe.RequestCustomHash Deserialize (Stream stream, Whisper.Repos.Pipe.RequestCustomHash instance)
		{
			while (true) {
				ProtocolBuffers.Key key = null;
				int keyByte = stream.ReadByte ();
				if (keyByte == -1)
					break;
				//Optimized reading of known fields with field ID < 16
				switch (keyByte) {
				case 10: //Field 1 LengthDelimited
					instance.CustomID = ProtocolParser.ReadBytes (stream);
					break;
				default:
					key = ProtocolParser.ReadKey ((byte)keyByte, stream);
					break;
				}
		
				if (key == null)
					continue;
		
				//Reading field ID > 16 and unknown field ID/wire type combinations
				switch (key.Field) {
				case 0:
					throw new InvalidDataException ("Invalid field id: 0, something went wrong in the stream");
				default:
					ProtocolParser.SkipKey (stream, key);
					break;
				}
			}
			
			return instance;
		}
		
		public static Whisper.Repos.Pipe.RequestCustomHash Read (byte[] buffer, Whisper.Repos.Pipe.RequestCustomHash instance)
		{
			using (MemoryStream ms = new MemoryStream(buffer))
				Deserialize (ms, instance);
			return instance;
		}
	
		public static void Serialize (Stream stream, RequestCustomHash instance)
		{
			if (instance.CustomID == null)
				throw new ArgumentNullException ("CustomID", "Required by proto specification.");
			ProtocolParser.WriteKey (stream, new ProtocolBuffers.Key (1, Wire.LengthDelimited));
			ProtocolParser.WriteBytes (stream, instance.CustomID);
		}
		
		public static byte[] SerializeToBytes (RequestCustomHash instance)
		{
			using (MemoryStream ms = new MemoryStream()) {
				Serialize (ms, instance);
				return ms.ToArray ();
			}
		}
	}
	

}
namespace Whisper.Repos.Pipe
{
	public partial class ReplyCustomHash
	{
		public static ReplyCustomHash Deserialize (Stream stream)
		{
			ReplyCustomHash instance = new ReplyCustomHash ();
			Deserialize (stream, instance);
			return instance;
		}
		
		public static ReplyCustomHash Deserialize (byte[] buffer)
		{
			using (MemoryStream ms = new MemoryStream(buffer))
				return Deserialize (ms);
		}
		
		public static T Deserialize<T> (Stream stream) where T : Whisper.Repos.Pipe.ReplyCustomHash, new()
		{
			T instance = new T ();
			Deserialize (stream, instance);
			return instance;
		}
		
		public static T Deserialize<T> (byte[] buffer) where T : Whisper.Repos.Pipe.ReplyCustomHash, new()
		{
			T instance = new T ();
			Deserialize (buffer, instance);
			return instance;
		}
		
		public static Whisper.Repos.Pipe.ReplyCustomHash Deserialize (byte[] buffer, Whisper.Repos.Pipe.ReplyCustomHash instance)
		{
			using (MemoryStream ms = new MemoryStream(buffer))
				Deserialize (ms, instance);
			return instance;
		}
		
		public static Whisper.Repos.Pipe.ReplyCustomHash Deserialize (Stream stream, Whisper.Repos.Pipe.ReplyCustomHash instance)
		{
			while (true) {
				ProtocolBuffers.Key key = null;
				int keyByte = stream.ReadByte ();
				if (keyByte == -1)
					break;
				//Optimized reading of known fields with field ID < 16
				switch (keyByte) {
				case 10: //Field 1 LengthDelimited
					instance.ChunkHash = ProtocolParser.ReadBytes (stream);
					break;
				default:
					key = ProtocolParser.ReadKey ((byte)keyByte, stream);
					break;
				}
		
				if (key == null)
					continue;
		
				//Reading field ID > 16 and unknown field ID/wire type combinations
				switch (key.Field) {
				case 0:
					throw new InvalidDataException ("Invalid field id: 0, something went wrong in the stream");
				default:
					ProtocolParser.SkipKey (stream, key);
					break;
				}
			}
			
			return instance;
		}
		
		public static Whisper.Repos.Pipe.ReplyCustomHash Read (byte[] buffer, Whisper.Repos.Pipe.ReplyCustomHash instance)
		{
			using (MemoryStream ms = new MemoryStream(buffer))
				Deserialize (ms, instance);
			return instance;
		}
	
		public static void Serialize (Stream stream, ReplyCustomHash instance)
		{
			if (instance.ChunkHash != null) {
				ProtocolParser.WriteKey (stream, new ProtocolBuffers.Key (1, Wire.LengthDelimited));
				ProtocolParser.WriteBytes (stream, instance.ChunkHash);
			}
		}
		
		public static byte[] SerializeToBytes (ReplyCustomHash instance)
		{
			using (MemoryStream ms = new MemoryStream()) {
				Serialize (ms, instance);
				return ms.ToArray ();
			}
		}
	}
	

}
namespace Whisper.Repos.Pipe
{
	public partial class RequestReadChunk
	{
		public static RequestReadChunk Deserialize (Stream stream)
		{
			RequestReadChunk instance = new RequestReadChunk ();
			Deserialize (stream, instance);
			return instance;
		}
		
		public static RequestReadChunk Deserialize (byte[] buffer)
		{
			using (MemoryStream ms = new MemoryStream(buffer))
				return Deserialize (ms);
		}
		
		public static T Deserialize<T> (Stream stream) where T : Whisper.Repos.Pipe.RequestReadChunk, new()
		{
			T instance = new T ();
			Deserialize (stream, instance);
			return instance;
		}
		
		public static T Deserialize<T> (byte[] buffer) where T : Whisper.Repos.Pipe.RequestReadChunk, new()
		{
			T instance = new T ();
			Deserialize (buffer, instance);
			return instance;
		}
		
		public static Whisper.Repos.Pipe.RequestReadChunk Deserialize (byte[] buffer, Whisper.Repos.Pipe.RequestReadChunk instance)
		{
			using (MemoryStream ms = new MemoryStream(buffer))
				Deserialize (ms, instance);
			return instance;
		}
		
		public static Whisper.Repos.Pipe.RequestReadChunk Deserialize (Stream stream, Whisper.Repos.Pipe.RequestReadChunk instance)
		{
			while (true) {
				ProtocolBuffers.Key key = null;
				int keyByte = stream.ReadByte ();
				if (keyByte == -1)
					break;
				//Optimized reading of known fields with field ID < 16
				switch (keyByte) {
				case 10: //Field 1 LengthDelimited
					instance.ChunkHash = ProtocolParser.ReadBytes (stream);
					break;
				default:
					key = ProtocolParser.ReadKey ((byte)keyByte, stream);
					break;
				}
		
				if (key == null)
					continue;
		
				//Reading field ID > 16 and unknown field ID/wire type combinations
				switch (key.Field) {
				case 0:
					throw new InvalidDataException ("Invalid field id: 0, something went wrong in the stream");
				default:
					ProtocolParser.SkipKey (stream, key);
					break;
				}
			}
			
			return instance;
		}
		
		public static Whisper.Repos.Pipe.RequestReadChunk Read (byte[] buffer, Whisper.Repos.Pipe.RequestReadChunk instance)
		{
			using (MemoryStream ms = new MemoryStream(buffer))
				Deserialize (ms, instance);
			return instance;
		}
	
		public static void Serialize (Stream stream, RequestReadChunk instance)
		{
			if (instance.ChunkHash == null)
				throw new ArgumentNullException ("ChunkHash", "Required by proto specification.");
			ProtocolParser.WriteKey (stream, new ProtocolBuffers.Key (1, Wire.LengthDelimited));
			ProtocolParser.WriteBytes (stream, instance.ChunkHash);
		}
		
		public static byte[] SerializeToBytes (RequestReadChunk instance)
		{
			using (MemoryStream ms = new MemoryStream()) {
				Serialize (ms, instance);
				return ms.ToArray ();
			}
		}
	}
	

}
namespace Whisper.Repos.Pipe
{
	public partial class ReplyReadChunk
	{
		public static ReplyReadChunk Deserialize (Stream stream)
		{
			ReplyReadChunk instance = new ReplyReadChunk ();
			Deserialize (stream, instance);
			return instance;
		}
		
		public static ReplyReadChunk Deserialize (byte[] buffer)
		{
			using (MemoryStream ms = new MemoryStream(buffer))
				return Deserialize (ms);
		}
		
		public static T Deserialize<T> (Stream stream) where T : Whisper.Repos.Pipe.ReplyReadChunk, new()
		{
			T instance = new T ();
			Deserialize (stream, instance);
			return instance;
		}
		
		public static T Deserialize<T> (byte[] buffer) where T : Whisper.Repos.Pipe.ReplyReadChunk, new()
		{
			T instance = new T ();
			Deserialize (buffer, instance);
			return instance;
		}
		
		public static Whisper.Repos.Pipe.ReplyReadChunk Deserialize (byte[] buffer, Whisper.Repos.Pipe.ReplyReadChunk instance)
		{
			using (MemoryStream ms = new MemoryStream(buffer))
				Deserialize (ms, instance);
			return instance;
		}
		
		public static Whisper.Repos.Pipe.ReplyReadChunk Deserialize (Stream stream, Whisper.Repos.Pipe.ReplyReadChunk instance)
		{
			while (true) {
				ProtocolBuffers.Key key = null;
				int keyByte = stream.ReadByte ();
				if (keyByte == -1)
					break;
				//Optimized reading of known fields with field ID < 16
				switch (keyByte) {
				case 10: //Field 1 LengthDelimited
					instance.ChunkData = ProtocolParser.ReadBytes (stream);
					break;
				default:
					key = ProtocolParser.ReadKey ((byte)keyByte, stream);
					break;
				}
		
				if (key == null)
					continue;
		
				//Reading field ID > 16 and unknown field ID/wire type combinations
				switch (key.Field) {
				case 0:
					throw new InvalidDataException ("Invalid field id: 0, something went wrong in the stream");
				default:
					ProtocolParser.SkipKey (stream, key);
					break;
				}
			}
			
			return instance;
		}
		
		public static Whisper.Repos.Pipe.ReplyReadChunk Read (byte[] buffer, Whisper.Repos.Pipe.ReplyReadChunk instance)
		{
			using (MemoryStream ms = new MemoryStream(buffer))
				Deserialize (ms, instance);
			return instance;
		}
	
		public static void Serialize (Stream stream, ReplyReadChunk instance)
		{
			if (instance.ChunkData != null) {
				ProtocolParser.WriteKey (stream, new ProtocolBuffers.Key (1, Wire.LengthDelimited));
				ProtocolParser.WriteBytes (stream, instance.ChunkData);
			}
		}
		
		public static byte[] SerializeToBytes (ReplyReadChunk instance)
		{
			using (MemoryStream ms = new MemoryStream()) {
				Serialize (ms, instance);
				return ms.ToArray ();
			}
		}
	}
	

}
namespace Whisper.Repos.Pipe
{
	public partial class RequestWriteChunk
	{
		public static RequestWriteChunk Deserialize (Stream stream)
		{
			RequestWriteChunk instance = new RequestWriteChunk ();
			Deserialize (stream, instance);
			return instance;
		}
		
		public static RequestWriteChunk Deserialize (byte[] buffer)
		{
			using (MemoryStream ms = new MemoryStream(buffer))
				return Deserialize (ms);
		}
		
		public static T Deserialize<T> (Stream stream) where T : Whisper.Repos.Pipe.RequestWriteChunk, new()
		{
			T instance = new T ();
			Deserialize (stream, instance);
			return instance;
		}
		
		public static T Deserialize<T> (byte[] buffer) where T : Whisper.Repos.Pipe.RequestWriteChunk, new()
		{
			T instance = new T ();
			Deserialize (buffer, instance);
			return instance;
		}
		
		public static Whisper.Repos.Pipe.RequestWriteChunk Deserialize (byte[] buffer, Whisper.Repos.Pipe.RequestWriteChunk instance)
		{
			using (MemoryStream ms = new MemoryStream(buffer))
				Deserialize (ms, instance);
			return instance;
		}
		
		public static Whisper.Repos.Pipe.RequestWriteChunk Deserialize (Stream stream, Whisper.Repos.Pipe.RequestWriteChunk instance)
		{
			while (true) {
				ProtocolBuffers.Key key = null;
				int keyByte = stream.ReadByte ();
				if (keyByte == -1)
					break;
				//Optimized reading of known fields with field ID < 16
				switch (keyByte) {
				case 10: //Field 1 LengthDelimited
					instance.ChunkData = ProtocolParser.ReadBytes (stream);
					break;
				default:
					key = ProtocolParser.ReadKey ((byte)keyByte, stream);
					break;
				}
		
				if (key == null)
					continue;
		
				//Reading field ID > 16 and unknown field ID/wire type combinations
				switch (key.Field) {
				case 0:
					throw new InvalidDataException ("Invalid field id: 0, something went wrong in the stream");
				default:
					ProtocolParser.SkipKey (stream, key);
					break;
				}
			}
			
			return instance;
		}
		
		public static Whisper.Repos.Pipe.RequestWriteChunk Read (byte[] buffer, Whisper.Repos.Pipe.RequestWriteChunk instance)
		{
			using (MemoryStream ms = new MemoryStream(buffer))
				Deserialize (ms, instance);
			return instance;
		}
	
		public static void Serialize (Stream stream, RequestWriteChunk instance)
		{
			if (instance.ChunkData == null)
				throw new ArgumentNullException ("ChunkData", "Required by proto specification.");
			ProtocolParser.WriteKey (stream, new ProtocolBuffers.Key (1, Wire.LengthDelimited));
			ProtocolParser.WriteBytes (stream, instance.ChunkData);
		}
		
		public static byte[] SerializeToBytes (RequestWriteChunk instance)
		{
			using (MemoryStream ms = new MemoryStream()) {
				Serialize (ms, instance);
				return ms.ToArray ();
			}
		}
	}
	

}
namespace Whisper.Repos.Pipe
{
	public partial class ReplyWriteChunk
	{
		public static ReplyWriteChunk Deserialize (Stream stream)
		{
			ReplyWriteChunk instance = new ReplyWriteChunk ();
			Deserialize (stream, instance);
			return instance;
		}
		
		public static ReplyWriteChunk Deserialize (byte[] buffer)
		{
			using (MemoryStream ms = new MemoryStream(buffer))
				return Deserialize (ms);
		}
		
		public static T Deserialize<T> (Stream stream) where T : Whisper.Repos.Pipe.ReplyWriteChunk, new()
		{
			T instance = new T ();
			Deserialize (stream, instance);
			return instance;
		}
		
		public static T Deserialize<T> (byte[] buffer) where T : Whisper.Repos.Pipe.ReplyWriteChunk, new()
		{
			T instance = new T ();
			Deserialize (buffer, instance);
			return instance;
		}
		
		public static Whisper.Repos.Pipe.ReplyWriteChunk Deserialize (byte[] buffer, Whisper.Repos.Pipe.ReplyWriteChunk instance)
		{
			using (MemoryStream ms = new MemoryStream(buffer))
				Deserialize (ms, instance);
			return instance;
		}
		
		public static Whisper.Repos.Pipe.ReplyWriteChunk Deserialize (Stream stream, Whisper.Repos.Pipe.ReplyWriteChunk instance)
		{
			while (true) {
				ProtocolBuffers.Key key = null;
				int keyByte = stream.ReadByte ();
				if (keyByte == -1)
					break;
				//Optimized reading of known fields with field ID < 16
				switch (keyByte) {
				default:
					key = ProtocolParser.ReadKey ((byte)keyByte, stream);
					break;
				}
		
				if (key == null)
					continue;
		
				//Reading field ID > 16 and unknown field ID/wire type combinations
				switch (key.Field) {
				case 0:
					throw new InvalidDataException ("Invalid field id: 0, something went wrong in the stream");
				default:
					ProtocolParser.SkipKey (stream, key);
					break;
				}
			}
			
			return instance;
		}
		
		public static Whisper.Repos.Pipe.ReplyWriteChunk Read (byte[] buffer, Whisper.Repos.Pipe.ReplyWriteChunk instance)
		{
			using (MemoryStream ms = new MemoryStream(buffer))
				Deserialize (ms, instance);
			return instance;
		}
	
		public static void Serialize (Stream stream, ReplyWriteChunk instance)
		{
		}
		
		public static byte[] SerializeToBytes (ReplyWriteChunk instance)
		{
			using (MemoryStream ms = new MemoryStream()) {
				Serialize (ms, instance);
				return ms.ToArray ();
			}
		}
	}
	

}
namespace Whisper.Repos.Pipe
{
	public partial class RequestMessageList
	{
		public static RequestMessageList Deserialize (Stream stream)
		{
			RequestMessageList instance = new RequestMessageList ();
			Deserialize (stream, instance);
			return instance;
		}
		
		public static RequestMessageList Deserialize (byte[] buffer)
		{
			using (MemoryStream ms = new MemoryStream(buffer))
				return Deserialize (ms);
		}
		
		public static T Deserialize<T> (Stream stream) where T : Whisper.Repos.Pipe.RequestMessageList, new()
		{
			T instance = new T ();
			Deserialize (stream, instance);
			return instance;
		}
		
		public static T Deserialize<T> (byte[] buffer) where T : Whisper.Repos.Pipe.RequestMessageList, new()
		{
			T instance = new T ();
			Deserialize (buffer, instance);
			return instance;
		}
		
		public static Whisper.Repos.Pipe.RequestMessageList Deserialize (byte[] buffer, Whisper.Repos.Pipe.RequestMessageList instance)
		{
			using (MemoryStream ms = new MemoryStream(buffer))
				Deserialize (ms, instance);
			return instance;
		}
		
		public static Whisper.Repos.Pipe.RequestMessageList Deserialize (Stream stream, Whisper.Repos.Pipe.RequestMessageList instance)
		{
			while (true) {
				ProtocolBuffers.Key key = null;
				int keyByte = stream.ReadByte ();
				if (keyByte == -1)
					break;
				//Optimized reading of known fields with field ID < 16
				switch (keyByte) {
				default:
					key = ProtocolParser.ReadKey ((byte)keyByte, stream);
					break;
				}
		
				if (key == null)
					continue;
		
				//Reading field ID > 16 and unknown field ID/wire type combinations
				switch (key.Field) {
				case 0:
					throw new InvalidDataException ("Invalid field id: 0, something went wrong in the stream");
				default:
					ProtocolParser.SkipKey (stream, key);
					break;
				}
			}
			
			return instance;
		}
		
		public static Whisper.Repos.Pipe.RequestMessageList Read (byte[] buffer, Whisper.Repos.Pipe.RequestMessageList instance)
		{
			using (MemoryStream ms = new MemoryStream(buffer))
				Deserialize (ms, instance);
			return instance;
		}
	
		public static void Serialize (Stream stream, RequestMessageList instance)
		{
		}
		
		public static byte[] SerializeToBytes (RequestMessageList instance)
		{
			using (MemoryStream ms = new MemoryStream()) {
				Serialize (ms, instance);
				return ms.ToArray ();
			}
		}
	}
	

}
namespace Whisper.Repos.Pipe
{
	public partial class ReplyMessageList
	{
		public static ReplyMessageList Deserialize (Stream stream)
		{
			ReplyMessageList instance = new ReplyMessageList ();
			Deserialize (stream, instance);
			return instance;
		}
		
		public static ReplyMessageList Deserialize (byte[] buffer)
		{
			using (MemoryStream ms = new MemoryStream(buffer))
				return Deserialize (ms);
		}
		
		public static T Deserialize<T> (Stream stream) where T : Whisper.Repos.Pipe.ReplyMessageList, new()
		{
			T instance = new T ();
			Deserialize (stream, instance);
			return instance;
		}
		
		public static T Deserialize<T> (byte[] buffer) where T : Whisper.Repos.Pipe.ReplyMessageList, new()
		{
			T instance = new T ();
			Deserialize (buffer, instance);
			return instance;
		}
		
		public static Whisper.Repos.Pipe.ReplyMessageList Deserialize (byte[] buffer, Whisper.Repos.Pipe.ReplyMessageList instance)
		{
			using (MemoryStream ms = new MemoryStream(buffer))
				Deserialize (ms, instance);
			return instance;
		}
		
		public static Whisper.Repos.Pipe.ReplyMessageList Deserialize (Stream stream, Whisper.Repos.Pipe.ReplyMessageList instance)
		{
			if (instance.ChunkHash == null)
				instance.ChunkHash = new List<byte[]> ();
			while (true) {
				ProtocolBuffers.Key key = null;
				int keyByte = stream.ReadByte ();
				if (keyByte == -1)
					break;
				//Optimized reading of known fields with field ID < 16
				switch (keyByte) {
				case 10: //Field 1 LengthDelimited
					instance.ChunkHash.Add (ProtocolParser.ReadBytes (stream));
		
					break;
				default:
					key = ProtocolParser.ReadKey ((byte)keyByte, stream);
					break;
				}
		
				if (key == null)
					continue;
		
				//Reading field ID > 16 and unknown field ID/wire type combinations
				switch (key.Field) {
				case 0:
					throw new InvalidDataException ("Invalid field id: 0, something went wrong in the stream");
				default:
					ProtocolParser.SkipKey (stream, key);
					break;
				}
			}
			
			return instance;
		}
		
		public static Whisper.Repos.Pipe.ReplyMessageList Read (byte[] buffer, Whisper.Repos.Pipe.ReplyMessageList instance)
		{
			using (MemoryStream ms = new MemoryStream(buffer))
				Deserialize (ms, instance);
			return instance;
		}
	
		public static void Serialize (Stream stream, ReplyMessageList instance)
		{
			if (instance.ChunkHash != null) {
				foreach (byte[] i1 in instance.ChunkHash) {
					ProtocolParser.WriteKey (stream, new ProtocolBuffers.Key (1, Wire.LengthDelimited));
					ProtocolParser.WriteBytes (stream, i1);
			
				}
			}
		}
		
		public static byte[] SerializeToBytes (ReplyMessageList instance)
		{
			using (MemoryStream ms = new MemoryStream()) {
				Serialize (ms, instance);
				return ms.ToArray ();
			}
		}
	}
	

}
namespace Whisper.Repos.Pipe
{
	public partial class RequestStoreMessage
	{
		public static RequestStoreMessage Deserialize (Stream stream)
		{
			RequestStoreMessage instance = new RequestStoreMessage ();
			Deserialize (stream, instance);
			return instance;
		}
		
		public static RequestStoreMessage Deserialize (byte[] buffer)
		{
			using (MemoryStream ms = new MemoryStream(buffer))
				return Deserialize (ms);
		}
		
		public static T Deserialize<T> (Stream stream) where T : Whisper.Repos.Pipe.RequestStoreMessage, new()
		{
			T instance = new T ();
			Deserialize (stream, instance);
			return instance;
		}
		
		public static T Deserialize<T> (byte[] buffer) where T : Whisper.Repos.Pipe.RequestStoreMessage, new()
		{
			T instance = new T ();
			Deserialize (buffer, instance);
			return instance;
		}
		
		public static Whisper.Repos.Pipe.RequestStoreMessage Deserialize (byte[] buffer, Whisper.Repos.Pipe.RequestStoreMessage instance)
		{
			using (MemoryStream ms = new MemoryStream(buffer))
				Deserialize (ms, instance);
			return instance;
		}
		
		public static Whisper.Repos.Pipe.RequestStoreMessage Deserialize (Stream stream, Whisper.Repos.Pipe.RequestStoreMessage instance)
		{
			while (true) {
				ProtocolBuffers.Key key = null;
				int keyByte = stream.ReadByte ();
				if (keyByte == -1)
					break;
				//Optimized reading of known fields with field ID < 16
				switch (keyByte) {
				case 10: //Field 1 LengthDelimited
					instance.ChunkHash = ProtocolParser.ReadBytes (stream);
					break;
				default:
					key = ProtocolParser.ReadKey ((byte)keyByte, stream);
					break;
				}
		
				if (key == null)
					continue;
		
				//Reading field ID > 16 and unknown field ID/wire type combinations
				switch (key.Field) {
				case 0:
					throw new InvalidDataException ("Invalid field id: 0, something went wrong in the stream");
				default:
					ProtocolParser.SkipKey (stream, key);
					break;
				}
			}
			
			return instance;
		}
		
		public static Whisper.Repos.Pipe.RequestStoreMessage Read (byte[] buffer, Whisper.Repos.Pipe.RequestStoreMessage instance)
		{
			using (MemoryStream ms = new MemoryStream(buffer))
				Deserialize (ms, instance);
			return instance;
		}
	
		public static void Serialize (Stream stream, RequestStoreMessage instance)
		{
			if (instance.ChunkHash == null)
				throw new ArgumentNullException ("ChunkHash", "Required by proto specification.");
			ProtocolParser.WriteKey (stream, new ProtocolBuffers.Key (1, Wire.LengthDelimited));
			ProtocolParser.WriteBytes (stream, instance.ChunkHash);
		}
		
		public static byte[] SerializeToBytes (RequestStoreMessage instance)
		{
			using (MemoryStream ms = new MemoryStream()) {
				Serialize (ms, instance);
				return ms.ToArray ();
			}
		}
	}
	

}
namespace Whisper.Repos.Pipe
{
	public partial class ReplyStoreMessage
	{
		public static ReplyStoreMessage Deserialize (Stream stream)
		{
			ReplyStoreMessage instance = new ReplyStoreMessage ();
			Deserialize (stream, instance);
			return instance;
		}
		
		public static ReplyStoreMessage Deserialize (byte[] buffer)
		{
			using (MemoryStream ms = new MemoryStream(buffer))
				return Deserialize (ms);
		}
		
		public static T Deserialize<T> (Stream stream) where T : Whisper.Repos.Pipe.ReplyStoreMessage, new()
		{
			T instance = new T ();
			Deserialize (stream, instance);
			return instance;
		}
		
		public static T Deserialize<T> (byte[] buffer) where T : Whisper.Repos.Pipe.ReplyStoreMessage, new()
		{
			T instance = new T ();
			Deserialize (buffer, instance);
			return instance;
		}
		
		public static Whisper.Repos.Pipe.ReplyStoreMessage Deserialize (byte[] buffer, Whisper.Repos.Pipe.ReplyStoreMessage instance)
		{
			using (MemoryStream ms = new MemoryStream(buffer))
				Deserialize (ms, instance);
			return instance;
		}
		
		public static Whisper.Repos.Pipe.ReplyStoreMessage Deserialize (Stream stream, Whisper.Repos.Pipe.ReplyStoreMessage instance)
		{
			while (true) {
				ProtocolBuffers.Key key = null;
				int keyByte = stream.ReadByte ();
				if (keyByte == -1)
					break;
				//Optimized reading of known fields with field ID < 16
				switch (keyByte) {
				default:
					key = ProtocolParser.ReadKey ((byte)keyByte, stream);
					break;
				}
		
				if (key == null)
					continue;
		
				//Reading field ID > 16 and unknown field ID/wire type combinations
				switch (key.Field) {
				case 0:
					throw new InvalidDataException ("Invalid field id: 0, something went wrong in the stream");
				default:
					ProtocolParser.SkipKey (stream, key);
					break;
				}
			}
			
			return instance;
		}
		
		public static Whisper.Repos.Pipe.ReplyStoreMessage Read (byte[] buffer, Whisper.Repos.Pipe.ReplyStoreMessage instance)
		{
			using (MemoryStream ms = new MemoryStream(buffer))
				Deserialize (ms, instance);
			return instance;
		}
	
		public static void Serialize (Stream stream, ReplyStoreMessage instance)
		{
		}
		
		public static byte[] SerializeToBytes (ReplyStoreMessage instance)
		{
			using (MemoryStream ms = new MemoryStream()) {
				Serialize (ms, instance);
				return ms.ToArray ();
			}
		}
	}
	

}

namespace ProtocolBuffers
{
	public static partial class Serializer
	{
		public static Whisper.Repos.Pipe.PipeHeader Read (Stream stream, Whisper.Repos.Pipe.PipeHeader instance)
		{
			return Whisper.Repos.Pipe.PipeHeader.Deserialize (stream, instance);
		}
		
		public static Whisper.Repos.Pipe.PipeHeader Read (byte[] buffer, Whisper.Repos.Pipe.PipeHeader instance)
		{
			using (MemoryStream ms = new MemoryStream(buffer))
				Whisper.Repos.Pipe.PipeHeader.Deserialize (ms, instance);
			return instance;
		}
		
		public static void Write (Stream stream, Whisper.Repos.Pipe.PipeHeader instance)
		{
			Whisper.Repos.Pipe.PipeHeader.Serialize (stream, instance);
		}

		public static Whisper.Repos.Pipe.RequestCustomHash Read (Stream stream, Whisper.Repos.Pipe.RequestCustomHash instance)
		{
			return Whisper.Repos.Pipe.RequestCustomHash.Deserialize (stream, instance);
		}
		
		public static Whisper.Repos.Pipe.RequestCustomHash Read (byte[] buffer, Whisper.Repos.Pipe.RequestCustomHash instance)
		{
			using (MemoryStream ms = new MemoryStream(buffer))
				Whisper.Repos.Pipe.RequestCustomHash.Deserialize (ms, instance);
			return instance;
		}
		
		public static void Write (Stream stream, Whisper.Repos.Pipe.RequestCustomHash instance)
		{
			Whisper.Repos.Pipe.RequestCustomHash.Serialize (stream, instance);
		}

		public static Whisper.Repos.Pipe.ReplyCustomHash Read (Stream stream, Whisper.Repos.Pipe.ReplyCustomHash instance)
		{
			return Whisper.Repos.Pipe.ReplyCustomHash.Deserialize (stream, instance);
		}
		
		public static Whisper.Repos.Pipe.ReplyCustomHash Read (byte[] buffer, Whisper.Repos.Pipe.ReplyCustomHash instance)
		{
			using (MemoryStream ms = new MemoryStream(buffer))
				Whisper.Repos.Pipe.ReplyCustomHash.Deserialize (ms, instance);
			return instance;
		}
		
		public static void Write (Stream stream, Whisper.Repos.Pipe.ReplyCustomHash instance)
		{
			Whisper.Repos.Pipe.ReplyCustomHash.Serialize (stream, instance);
		}

		public static Whisper.Repos.Pipe.RequestReadChunk Read (Stream stream, Whisper.Repos.Pipe.RequestReadChunk instance)
		{
			return Whisper.Repos.Pipe.RequestReadChunk.Deserialize (stream, instance);
		}
		
		public static Whisper.Repos.Pipe.RequestReadChunk Read (byte[] buffer, Whisper.Repos.Pipe.RequestReadChunk instance)
		{
			using (MemoryStream ms = new MemoryStream(buffer))
				Whisper.Repos.Pipe.RequestReadChunk.Deserialize (ms, instance);
			return instance;
		}
		
		public static void Write (Stream stream, Whisper.Repos.Pipe.RequestReadChunk instance)
		{
			Whisper.Repos.Pipe.RequestReadChunk.Serialize (stream, instance);
		}

		public static Whisper.Repos.Pipe.ReplyReadChunk Read (Stream stream, Whisper.Repos.Pipe.ReplyReadChunk instance)
		{
			return Whisper.Repos.Pipe.ReplyReadChunk.Deserialize (stream, instance);
		}
		
		public static Whisper.Repos.Pipe.ReplyReadChunk Read (byte[] buffer, Whisper.Repos.Pipe.ReplyReadChunk instance)
		{
			using (MemoryStream ms = new MemoryStream(buffer))
				Whisper.Repos.Pipe.ReplyReadChunk.Deserialize (ms, instance);
			return instance;
		}
		
		public static void Write (Stream stream, Whisper.Repos.Pipe.ReplyReadChunk instance)
		{
			Whisper.Repos.Pipe.ReplyReadChunk.Serialize (stream, instance);
		}

		public static Whisper.Repos.Pipe.RequestWriteChunk Read (Stream stream, Whisper.Repos.Pipe.RequestWriteChunk instance)
		{
			return Whisper.Repos.Pipe.RequestWriteChunk.Deserialize (stream, instance);
		}
		
		public static Whisper.Repos.Pipe.RequestWriteChunk Read (byte[] buffer, Whisper.Repos.Pipe.RequestWriteChunk instance)
		{
			using (MemoryStream ms = new MemoryStream(buffer))
				Whisper.Repos.Pipe.RequestWriteChunk.Deserialize (ms, instance);
			return instance;
		}
		
		public static void Write (Stream stream, Whisper.Repos.Pipe.RequestWriteChunk instance)
		{
			Whisper.Repos.Pipe.RequestWriteChunk.Serialize (stream, instance);
		}

		public static Whisper.Repos.Pipe.ReplyWriteChunk Read (Stream stream, Whisper.Repos.Pipe.ReplyWriteChunk instance)
		{
			return Whisper.Repos.Pipe.ReplyWriteChunk.Deserialize (stream, instance);
		}
		
		public static Whisper.Repos.Pipe.ReplyWriteChunk Read (byte[] buffer, Whisper.Repos.Pipe.ReplyWriteChunk instance)
		{
			using (MemoryStream ms = new MemoryStream(buffer))
				Whisper.Repos.Pipe.ReplyWriteChunk.Deserialize (ms, instance);
			return instance;
		}
		
		public static void Write (Stream stream, Whisper.Repos.Pipe.ReplyWriteChunk instance)
		{
			Whisper.Repos.Pipe.ReplyWriteChunk.Serialize (stream, instance);
		}

		public static Whisper.Repos.Pipe.RequestMessageList Read (Stream stream, Whisper.Repos.Pipe.RequestMessageList instance)
		{
			return Whisper.Repos.Pipe.RequestMessageList.Deserialize (stream, instance);
		}
		
		public static Whisper.Repos.Pipe.RequestMessageList Read (byte[] buffer, Whisper.Repos.Pipe.RequestMessageList instance)
		{
			using (MemoryStream ms = new MemoryStream(buffer))
				Whisper.Repos.Pipe.RequestMessageList.Deserialize (ms, instance);
			return instance;
		}
		
		public static void Write (Stream stream, Whisper.Repos.Pipe.RequestMessageList instance)
		{
			Whisper.Repos.Pipe.RequestMessageList.Serialize (stream, instance);
		}

		public static Whisper.Repos.Pipe.ReplyMessageList Read (Stream stream, Whisper.Repos.Pipe.ReplyMessageList instance)
		{
			return Whisper.Repos.Pipe.ReplyMessageList.Deserialize (stream, instance);
		}
		
		public static Whisper.Repos.Pipe.ReplyMessageList Read (byte[] buffer, Whisper.Repos.Pipe.ReplyMessageList instance)
		{
			using (MemoryStream ms = new MemoryStream(buffer))
				Whisper.Repos.Pipe.ReplyMessageList.Deserialize (ms, instance);
			return instance;
		}
		
		public static void Write (Stream stream, Whisper.Repos.Pipe.ReplyMessageList instance)
		{
			Whisper.Repos.Pipe.ReplyMessageList.Serialize (stream, instance);
		}

		public static Whisper.Repos.Pipe.RequestStoreMessage Read (Stream stream, Whisper.Repos.Pipe.RequestStoreMessage instance)
		{
			return Whisper.Repos.Pipe.RequestStoreMessage.Deserialize (stream, instance);
		}
		
		public static Whisper.Repos.Pipe.RequestStoreMessage Read (byte[] buffer, Whisper.Repos.Pipe.RequestStoreMessage instance)
		{
			using (MemoryStream ms = new MemoryStream(buffer))
				Whisper.Repos.Pipe.RequestStoreMessage.Deserialize (ms, instance);
			return instance;
		}
		
		public static void Write (Stream stream, Whisper.Repos.Pipe.RequestStoreMessage instance)
		{
			Whisper.Repos.Pipe.RequestStoreMessage.Serialize (stream, instance);
		}

		public static Whisper.Repos.Pipe.ReplyStoreMessage Read (Stream stream, Whisper.Repos.Pipe.ReplyStoreMessage instance)
		{
			return Whisper.Repos.Pipe.ReplyStoreMessage.Deserialize (stream, instance);
		}
		
		public static Whisper.Repos.Pipe.ReplyStoreMessage Read (byte[] buffer, Whisper.Repos.Pipe.ReplyStoreMessage instance)
		{
			using (MemoryStream ms = new MemoryStream(buffer))
				Whisper.Repos.Pipe.ReplyStoreMessage.Deserialize (ms, instance);
			return instance;
		}
		
		public static void Write (Stream stream, Whisper.Repos.Pipe.ReplyStoreMessage instance)
		{
			Whisper.Repos.Pipe.ReplyStoreMessage.Serialize (stream, instance);
		}


	}
}
